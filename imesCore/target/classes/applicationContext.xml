<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans classpath:org/springframework/beans/factory/xml/spring-beans-4.0.xsd
				http://www.springframework.org/schema/context classpath:org/springframework/context/config/spring-context-4.0.xsd
				http://www.springframework.org/schema/aop classpath:org/springframework/aop/config/spring-aop-4.0.xsd
								http://www.springframework.org/schema/tx classpath:org/springframework/transaction/config/spring-tx-4.0.xsd
				http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- Enable annotation configuration -->
	<context:annotation-config />
	<!-- Scan packages for Spring annotations -->
	<context:component-scan base-package="com.chimade.mes" />
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="org.postgresql.Driver"/>
		<property name="url" value="jdbc:postgresql://127.0.0.1:5432/imes" />
		<property name="username" value="postgres" />
		<property name="password" value="dbms4Fna" />
		<property name="maxActive" value="10" />
		<property name="maxIdle" value="10" />
		<property name="maxWait" value="1000" />
		<property name="defaultAutoCommit" value="true" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="300" />
	</bean>
      <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
          <property name="dataSource" ref="dataSource"></property>
         <!-- 加载mybatis.cfg.xml文件 -->
          <property name="configLocation" value="classpath:mybatis-config.xml"></property>
          <property name="mapperLocations"  value="classpath*:com/chimade/mes/sys/mapper/*Mapper.xml"></property>
<!--           <property name="mapperLocations"> -->
<!--           	<array> -->
<!--           		<value>classpath:mapper/*.xml</value> -->
<!--           	</array> -->
<!--   	</property> -->
         <!-- 自动扫描需要定义类别名的包，将包内的JAVA类的类名作为类别名 -->
        <property name="typeAliasesPackage" value="com.chimade.mes.sys.model"></property>
      </bean>
      
    <!-- 自动扫描所有的Mapper接口与文件 -->
      <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
          <property name="basePackage" value="com.chimade.mes.sys.mapper"></property>
          <!-- why need below attribute ? -->
          <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
      </bean>
     
 
<!-- 配置事务管理器 -->
   <bean id="txManager"       class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
       <property name="dataSource" ref="dataSource"></property>
   </bean>
   	<!-- 5. 使用声明式事务
		 transaction-manager：引用上面定义的事务管理器
	 -->
	<tx:annotation-driven transaction-manager="txManager" />
	
   <!-- 定义个通知，指定事务管理器 -->
   <tx:advice id="myBatisTxAdvice" transaction-manager="txManager">
       <tx:attributes>
           <tx:method name="delete*" propagation="REQUIRED" read-only="false"
               rollback-for="java.lang.Exception" />
           <tx:method name="save*" propagation="REQUIRED" read-only="false"
               rollback-for="java.lang.Exception" />
           <tx:method name="insert*" propagation="REQUIRED" read-only="false"
               rollback-for="java.lang.Exception" />
           <tx:method name="update*" propagation="REQUIRED" read-only="false"
               rollback-for="java.lang.Exception" />
           <tx:method name="load*" propagation="SUPPORTS" read-only="true"/>
           <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
           <tx:method name="search*" propagation="SUPPORTS" read-only="true"/>
           <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
           <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
       </tx:attributes>
   </tx:advice>
   
   <aop:config>
       <!-- 配置一个切入点 -->
       <aop:pointcut id="myBatisServiceMethods" expression="execution(* com.chimade.mes.sys.service.impl.*ServiceImpl.*(..))" />
       <aop:advisor advice-ref="myBatisTxAdvice" pointcut-ref="myBatisServiceMethods" />
   </aop:config>
   
   
<!--    <bean id="shiroSecurityRealm"   class="com.chimade.mes.security.ShiroSecurityRealm" /> -->
   	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroSecurityRealm" />
	</bean>
    
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/sys/sysuser/home"/>
        <property name="unauthorizedUrl" value="/sys/sysuser/callUnauthorized"/>
        <property name="filters">
            <util:map>
                <entry key="authc">
                    <bean class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter"/>
                </entry>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
            	/static/** = anon
            	/index.jsp = anon
            	/login.jsp = anon
            	/sys/sysuser/login = anon
<!--             	/sys/sysuser/register = anon -->
<!--             	/sys/sysuser/retrievePassword = anon -->
<!--             	/client/face = anon -->
            	/sys/sysuser/logout = logout
            	/** = authc
            </value>
        </property>
    </bean>
    
    
    
    <!-- Post processor that automatically invokes init() and destroy() methods -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
</beans>